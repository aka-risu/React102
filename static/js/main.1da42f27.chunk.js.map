{"version":3,"sources":["Feedback/FeedbackOptions/FeedbackOptions.js","Feedback/Statistics/Statistics.js","Feedback/Section/Section.js","Feedback/Notification/Notification.js","Feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","onClick","name","className","Statistics","good","bad","neutral","total","positivePercentage","Section","title","children","Notification","message","Feedback","state","target","setState","prevState","Object","values","this","Math","round","countTotalFeedback","keys","countPositiveFeedbackPercentage","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAyBeA,EAvBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,QAASH,EACTI,KAAMF,EACNG,UAAU,eAJZ,SAMGH,GALIA,SCGEI,EATI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAKC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,uCAAUJ,KACV,0CAAaE,KACb,sCAASD,KACT,wCAAWE,KACX,mDAAsBC,EAAtB,W,MCGWC,MARf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,sBAAKT,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBQ,IACtBC,MCHQC,G,MADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGX,UAAU,eAAb,SAA6BW,MCsDpDC,G,kNAhDbC,MAAQ,CAAEX,KAAM,EAAGE,QAAS,EAAGD,IAAK,G,EACpCL,QAAU,YAA2B,IAAdC,EAAa,EAAvBe,OAAUf,KACrB,EAAKgB,UAAS,SAAAC,GACZ,OAAO,eAAGjB,EAAOiB,EAAUjB,GAAQ,O,wDAGvC,WAGE,IAFA,IAAIM,EAAQ,EAEZ,MAAkBY,OAAOC,OAAOC,KAAKN,OAArC,eAA6C,CAC3CR,GADY,KAGd,OAAOA,I,6CAET,WACE,OACEc,KAAKN,MAAMX,MACXkB,KAAKC,MAAOF,KAAKN,MAAMX,KAAOiB,KAAKG,qBAAwB,O,oBAG/D,WACE,OACE,qCACE,cAAC,EAAD,CAASd,MAAM,wBAAf,SACE,cAAC,EAAD,CACEd,QAASuB,OAAOM,KAAKJ,KAAKN,OAC1BlB,gBAAiBwB,KAAKrB,YAIxBqB,KAAKG,qBAGL,cAAC,EAAD,CAASd,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMiB,KAAKN,MAAMX,KACjBE,QAASe,KAAKN,MAAMT,QACpBD,IAAKgB,KAAKN,MAAMV,IAChBE,MAAOc,KAAKG,qBACZhB,mBAAoBa,KAAKK,sCAR7B,cAAC,EAAD,CAAcb,QAAQ,6B,GAhCTc,cCGRC,MARf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,EAAD,OCCN2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1da42f27.chunk.js","sourcesContent":["import './FeedbackOptions.scss';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map(option => (\n      <button\n        key={option}\n        onClick={onLeaveFeedback}\n        name={option}\n        className=\"feedback_btn\"\n      >\n        {option}\n      </button>\n    ))}\n    {/* <button onClick={onLeaveFeedback} name=\"good\">\n      Good\n    </button>\n    <button onClick={onLeaveFeedback} name=\"neutral\">\n      Neutral\n    </button>\n    <button onClick={onLeaveFeedback} name=\"bad\">\n      Bad\n    </button> */}\n  </>\n);\nexport default FeedbackOptions;\n","const Statistics = ({ good, bad, neutral, total, positivePercentage }) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>PositiveFeedback: {positivePercentage}%</p>\n  </>\n);\nexport default Statistics;\n","import './section.scss';\nfunction Section({ title, children }) {\n  return (\n    <div className=\"section\">\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </div>\n  );\n}\nexport default Section;\n","import './notification.scss';\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\nexport default Notification;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\nimport './styles.scss';\nclass Feedback extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n  onClick = ({ target: { name } }) => {\n    this.setState(prevState => {\n      return { [name]: prevState[name] + 1 };\n    });\n  };\n  countTotalFeedback() {\n    let total = 0;\n\n    for (let value of Object.values(this.state)) {\n      total += value;\n    }\n    return total;\n  }\n  countPositiveFeedbackPercentage() {\n    return (\n      this.state.good &&\n      Math.round((this.state.good / this.countTotalFeedback()) * 100)\n    );\n  }\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onClick}\n          />\n        </Section>\n\n        {!this.countTotalFeedback() ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Feedback;\n","import Feedback from './Feedback/Feedback';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}