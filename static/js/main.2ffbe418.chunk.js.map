{"version":3,"sources":["Feedback/Section/Section.js","Phonebook/InputName.js","Phonebook/InputNumber.js","redux/contacts/contacts-actions.js","Phonebook/ContactForm.js","Phonebook/Contact.js","redux/actions.js","Phonebook/ContactList.js","Phonebook/Filter.js","Phonebook/Phonebook.js","App.js","redux/contacts/contacts-reducer.js","redux/errors/errors-actions.js","redux/errors/errors-reducer.js","redux/store.js","index.js"],"names":["Section","connect","state","console","log","errors","errorContactExists","dispatch","errorName","value","handleInput","TextField","error","id","label","helperText","onChange","errorNumber","errorNumberExists","clearErrors","addContact","createAction","changeFilter","deleteContact","setErrorContactExist","setErrorNumberExist","contacts","setContact","actions","setErrorContactExists","setErrorNumberExists","setErrorName","setErrorNumber","useState","name","setName","number","setNumber","className","onSubmit","event","preventDefault","uuidv4","autoComplete","Box","p","height","target","type","margin","test","Button","variant","color","payload","contact","display","alignItems","justifyContent","flexGrow","IconButton","aria-label","onClick","filteredContacts","filter","item","toLowerCase","includes","map","setFilter","filterContacts","placeholder","Phonebook","Container","maxWidth","align","Card","width","App","createReducer","_","combineReducers","store","configureStore","reducer","contactsReducer","errorsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ffbe418.chunk.js","sourcesContent":["import './section.scss';\nfunction Section({ title, children }) {\n  return (\n    <div className=\"section\">\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </div>\n  );\n}\nexport default Section;\n","import TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions';\nconst InputName = ({\n  errorName,\n  errorContactExists,\n  value,\n  handleInput,\n  // clearErrors,\n  // setName,\n}) => {\n  return (\n    <>\n      {errorContactExists ? (\n        <TextField\n          error\n          id=\"errorExist\"\n          label=\"Error\"\n          helperText=\"Name exists\"\n          value={value}\n          onChange={handleInput}\n          // onBlur={clearErrors}\n        ></TextField>\n      ) : (\n        // ) : errorName ? (\n        //   <TextField\n        //     error\n        //     id=\"error\"\n        //     label=\"Error\"\n        //     helperText=\"Enter valid name\"\n        //     value={name}\n        //     onChange={handleInput}\n        //     // onBlur={clearErrors}\n        //   ></TextField>\n        <TextField\n          id=\"name-input\"\n          label=\"Name\"\n          value={value}\n          onChange={handleInput}\n        ></TextField>\n      )}\n    </>\n  );\n};\nInputName.propTypes = {\n  errorName: PropTypes.bool,\n  errorNumber: PropTypes.bool,\n  errorContactExists: PropTypes.bool,\n  errorNumberExists: PropTypes.bool,\n  name: PropTypes.string,\n  handleInput: PropTypes.func,\n  clearErrors: PropTypes.func,\n  value: PropTypes.string,\n};\nconst mapStateToProps = state => {\n  console.log(state.errors.errors);\n  return {\n    // contacts: state.contacts,\n    // filteredContacts: state.filteredContacts,\n    // filter: state.filter,\n    errorContactExists: state.errors.errorContactExists,\n    // errorNumberExists: state.errorNumberExists,\n    // errorName: state.contactFormInput.errorName,\n    // errorNumber: state.contactFormInput.errorNumber,\n    // name: state.contactForm.name,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    // setContacts: contact => dispatch(actions.addContact(contact)),\n    // deleteContact: id => dispatch(actions.deleteContact(id)),\n    // filterContacts: () => dispatch(actions.filterContacts()),\n    // setFilter: filter => dispatch(actions.setFilter(filter)),\n    // setErrorContactExists: value =>\n    //   dispatch(actions.setErrorContactExists(value)),\n    // setErrorNumberExists: value =>\n    //   dispatch(actions.setErrorNumberExists(value)),\n    // setName: value => dispatch(actions.setName(value)),\n    // clearErrors: () => {\n    //   dispatch(\n    //     actions.setErrorName(false),\n    //     actions.setErrorContactExists(false),\n    //     actions.setErrorNumber(false),\n    //     actions.setErrorNumberExists(false),\n    //   );\n    // },\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InputName);\n","import TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions';\nconst InputNumber = ({\n  errorNumber,\n  errorNumberExists,\n  value,\n  clearErrors,\n  // setNumber,\n  handleInput,\n}) => {\n  return (\n    <>\n      {errorNumberExists ? (\n        <TextField\n          error\n          id=\"errorExist\"\n          label=\"Error\"\n          helperText=\"Number exists\"\n          value={value}\n          onChange={handleInput}\n          // onBlur={clearErrors}\n        ></TextField>\n      ) : errorNumber ? (\n        <TextField\n          error\n          id=\"error\"\n          label=\"Error\"\n          helperText=\"Enter valid number\"\n          value={value}\n          onChange={handleInput}\n          // onBlur={clearErrors}\n        ></TextField>\n      ) : (\n        <TextField\n          id=\"number-input\"\n          label=\"Number\"\n          value={value}\n          onChange={handleInput}\n        ></TextField>\n      )}\n    </>\n  );\n};\nInputNumber.propTypes = {\n  errorName: PropTypes.bool,\n  errorNumber: PropTypes.bool,\n  errorContactExists: PropTypes.bool,\n  errorNumberExists: PropTypes.bool,\n  name: PropTypes.string,\n  handleInput: PropTypes.func,\n  clearErrors: PropTypes.func,\n  value: PropTypes.string,\n};\nconst mapStateToProps = state => {\n  return {\n    // contacts: state.contacts,\n    // filteredContacts: state.filteredContacts,\n    // filter: state.filter,\n    // errorContactExists: state.errorContactExists,\n    // errorNumberExists: state.errorNumberExists,\n    // errorName: state.contactFormInput.errorName,\n    // errorNumber: state.contactFormInput.errorNumber,\n    // number: state.contactForm.number,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    // setContacts: contact => dispatch(actions.addContact(contact)),\n    // deleteContact: id => dispatch(actions.deleteContact(id)),\n    // filterContacts: () => dispatch(actions.filterContacts()),\n    // setFilter: filter => dispatch(actions.setFilter(filter)),\n    // setErrorContactExists: value =>\n    //   dispatch(actions.setErrorContactExists(value)),\n    // setErrorNumberExists: value =>\n    //   dispatch(actions.setErrorNumberExists(value)),\n    // setNumber: value => dispatch(actions.setNumber(value)),\n    // clearErrors: () =>\n    //   dispatch(\n    //     actions.setErrorName(false),\n    //     actions.setErrorContactExists(false),\n    //     actions.setErrorNumber(false),\n    //     actions.setErrorNumberExists(false),\n    //   ),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InputNumber);\n","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacs/addContact');\nconst changeFilter = createAction('contacs/changeFilter');\nconst deleteContact = createAction('contacts/deleteContact');\nconst setErrorContactExist = createAction('contacts/setErrorContactExist');\nconst setErrorNumberExist = createAction('contacts/setErrorNumberExist');\nexport default {\n  addContact,\n  changeFilter,\n  deleteContact,\n  setErrorNumberExist,\n  setErrorContactExist,\n};\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport InputName from './InputName';\nimport InputNumber from './InputNumber';\nimport Button from '@material-ui/core/Button';\nimport './phonebook.scss';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport './phonebook.scss';\nimport { connect } from 'react-redux';\nimport actions from '../redux/contacts/contacts-actions';\n\nconst ContactForm = ({\n  setContact,\n  clearErrors,\n  setErrorContactExists,\n  setErrorNumberExists,\n  setErrorName,\n  setErrorNumber,\n}) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  function handleInput(event) {\n    console.log(name);\n    setName(event.target.value);\n    // clearErrors();\n  }\n  function handleNumberInput(event) {\n    console.log(event);\n    const regexp = /^[0-9\\b]+$/;\n    if (regexp.test(event.target.value) || event.target.value === '') {\n      setNumber(event.target.value);\n    }\n    // clearErrors();\n  }\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    setContact({\n      name: name,\n      id: uuidv4(),\n      number: number,\n    });\n    console.log({\n      name: name,\n      id: uuidv4(),\n      number: number,\n    });\n  }\n\n  // function clearErrors() {\n  //   setErrorName(false);\n  //   setErrorContactExists(false);\n  //   setErrorNumber(false);\n  //   setErrorNumberExists(false);\n  // }\n\n  return (\n    <form className=\"input-form\" onSubmit={handleFormSubmit} autoComplete=\"off\">\n      <Box p={2}>\n        <Box height={60}>\n          <InputName\n            className=\"input\"\n            name=\"Name\"\n            handleInput={handleInput}\n            // clearErrors={clearErrors}\n            type=\"string\"\n            margin=\"normal\"\n            value={name}\n          />\n        </Box>\n        <Box height={60}>\n          <InputNumber\n            className=\"input\"\n            name=\"Number\"\n            handleInput={handleNumberInput}\n            // clearErrors={clearErrors}\n            type=\"number\"\n            margin=\"normal\"\n            value={number}\n          />\n        </Box>\n      </Box>\n\n      <Box p={2}>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n};\n// ContactForm.propTypes = {\n//   setContacts: PropTypes.func.isRequired,\n//   errorContactExists: PropTypes.bool,\n//   setErrorContactExists: PropTypes.func,\n//   errorNumberExists: PropTypes.bool,\n//   setErrorNumberExists: PropTypes.func,\n// };\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts,\n    // filteredContacts: state.filteredContacts,\n    // filter: state.filter,\n    // errorContactExists: state.errorContactExists,\n    // errorNumberExists: state.errorNumberExists,\n    // errorName: state.contactFormInput.errorName,\n    // errorNumber: state.contactFormInput.errorNumber,\n    // name: state.contactForm.name,\n    // number: state.contactForm.number,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    // setContacts: contact => dispatch(actions.addContact(contact)),\n    setContact: value => dispatch(actions.addContact(value)),\n    // deleteContact: id => dispatch(actions.deleteContact(id)),\n    // filterContacts: () => dispatch(actions.filterContacts()),\n    // setFilter: filter => dispatch(actions.setFilter(filter)),\n    // setErrorContactExists: value =>\n    //   dispatch(actions.setErrorContactExists(value)),\n    // setErrorNumberExists: value =>\n    //   dispatch(actions.setErrorNumberExists(value)),\n    // setErrorName: value => dispatch(actions.setErrorName(value)),\n    // setErrorNumber: value => dispatch(actions.setErrorNumber(value)),\n    // setName: value => dispatch(actions.setName(value)),\n    // setNumber: value => dispatch(actions.setNumber(value)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions';\nconst Contact = ({ contact: { id, name, number }, deleteContact }) => (\n  <li>\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Box flexGrow={1}>\n        {name}: <span>{number}</span>\n      </Box>\n      <Box>\n        <IconButton aria-label=\"delete\" onClick={() => deleteContact(id)}>\n          <DeleteIcon />\n        </IconButton>\n      </Box>\n    </Box>\n    {/* <button onClick={() => deleteContact(id)}>Delete</button> */}\n  </li>\n);\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    number: PropTypes.string,\n  }).isRequired,\n  deleteContact: PropTypes.func,\n};\nconst mapStateToProps = () => {\n  return {};\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteContact: id => dispatch(actions.deleteContact(id)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);\n","export const addContact = value => ({\n  type: 'contacts/addContact',\n  payload: value,\n});\n\nexport const deleteContact = value => ({\n  type: 'contacts/deleteContact',\n  payload: value,\n});\n\nexport const filterContacts = value => ({\n  type: 'contacts/filterContacts',\n  payload: value,\n});\n\nexport const setFilter = value => ({\n  type: 'contacts/setFilter',\n  payload: value,\n});\n\nexport const setErrorContactExists = value => ({\n  type: 'contacts/setErrorContactExists',\n  payload: value,\n});\n\nexport const setErrorNumberExists = value => ({\n  type: 'contacts/setErrorNumberExists',\n  payload: value,\n});\n\nexport const setErrorName = value => ({\n  type: 'contactFormInput/setErrorName',\n  payload: value,\n});\n\nexport const setErrorNumber = value => ({\n  type: 'contactFormInput/setErrorNumber',\n  payload: value,\n});\n\nexport const setName = value => ({\n  type: 'contactForm/setName',\n  payload: value,\n});\n\nexport const setNumber = value => ({\n  type: 'contactForm/setNumber',\n  payload: value,\n});\n","import Contact from './Contact';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst ContactList = ({ filteredContacts }) => (\n  <ul>\n    {filteredContacts.map(contact => (\n      <Contact contact={contact} key={contact.id} />\n    ))}\n  </ul>\n);\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nconst mapStateToProps = state => {\n  console.log(state.contacts.contacts);\n  return {\n    filteredContacts: state.contacts.contacts.filter(item =>\n      item.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n    ),\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n","import TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../redux/contacts/contacts-actions';\nconst Filter = ({ filter, setFilter, filterContacts }) => {\n  // function handleFilter(event) {\n  //   setFilter(event.target.value);\n  //   // filterContacts();\n  // }\n  return (\n    <TextField\n      id=\"outlined-search\"\n      label=\"Find contacts\"\n      type=\"search\"\n      variant=\"outlined\"\n      placeholder=\"Name\"\n      value={filter}\n      onChange={event => setFilter(event.target.value)}\n    />\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  setFilter: PropTypes.func,\n};\n\nconst mapStateToProps = state => {\n  return {\n    filter: state.contacts.filter,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFilter: filter => dispatch(actions.changeFilter(filter)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './phonebook.scss';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\nimport Card from '@material-ui/core/Card';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n\nimport { connect } from 'react-redux';\nconst Phonebook = () => {\n  // useEffect(() => {\n  //   const contactsFomLocalStorage = JSON.parse(\n  //     localStorage.getItem('contacts'),\n  //   );\n  //   if (contactsFomLocalStorage) setContact(contactsFomLocalStorage);\n  // }, []);\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  return (\n    <Container maxWidth=\"sm\" align=\"center\">\n      <Card className=\"phonebook\" align=\"center\">\n        <h2>Phonebook</h2>\n        <Box width=\"50%\">\n          <ContactForm />\n        </Box>\n        <h2>Contacts</h2>\n        <Filter />\n        <Box width=\"50%\">\n          <ContactList />\n        </Box>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Phonebook;\n","import Feedback from './Feedback/Feedback';\nimport Phonebook from './Phonebook/Phonebook';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Phonebook />\n      {/* <Feedback /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst contactsState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\nconst contacts = createReducer(contactsState, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n//  switch (type) {\n// case 'contacts/addContact':\n//   if (\n//     state.contacts.find(item => item.name === state.contactForm.name) ||\n//     state.contacts.find(item => item.number === state.contactForm.number)\n//   ) {\n//     if (\n//       state.contacts.find(item => item.number === state.contactForm.number)\n//     ) {\n//       state.errorNumberExists = true;\n//     }\n//     if (state.contacts.find(item => item.name === state.contactForm.name)) {\n//       state.errorContactExists = true;\n//     }\n//     return {\n//       ...state,\n//     };\n//   } else if (\n//     state.contactForm.name === '' ||\n//     state.contactForm.number === ''\n//   ) {\n//     if (state.contactForm.name === '') {\n//       state.contactFormInput.errorName = true;\n//     }\n//     if (state.contactForm.number === '') {\n//       state.contactFormInput.errorNumber = true;\n//     }\n//     return {\n//       ...state,\n//     };\n//   } else {\n//     return {\n//       ...state,\n//       contacts: [\n//         ...state.contacts,\n//         {\n//           name: state.contactForm.name,\n//           id: uuidv4(),\n//           number: state.contactForm.number,\n//         },\n//       ],\n//       contactForm: {\n//         ...state.contactForm,\n//         name: '',\n//         number: '',\n//       },\n//     };\n//   }\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nconst setErrorNumberExists = createAction('errors/setErrorNumberExists');\n\nexport default {\n  setErrorNumberExists,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './errors-actions';\n\nconst errorsState = {};\nconst errors = createReducer(errorsState, {\n  [actions.setErrorNumberExists]: (_, { payload }) => payload,\n});\n//   case 'contacts/setErrorNumberExists':\n//       return {\n//         ...state,\n//         errorNumberExists: payload,\n//       };\nexport default combineReducers({\n  errors,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { v4 as uuidv4 } from 'uuid';\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport errorsReducer from './errors/errors-reducer';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n    errors: errorsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n});\n// const store = createStore(reducer);\n// const initialState = {\n\n//   filteredContacts: [],\n//   filter: '',\n//   errorContactExists: false,\n//   errorNumberExists: false,\n//   contactFormInput: {\n//     errorName: false,\n//     errorNumber: false,\n//   },\n//   contactForm: {\n//     name: '',\n//     number: '',\n//   },\n// };\n\n// const reducer = (state = initialState, { type, payload }) => {\n//   switch (type) {\n//     case 'contacts/addContact':\n//       if (\n//         state.contacts.find(item => item.name === state.contactForm.name) ||\n//         state.contacts.find(item => item.number === state.contactForm.number)\n//       ) {\n//         if (\n//           state.contacts.find(item => item.number === state.contactForm.number)\n//         ) {\n//           state.errorNumberExists = true;\n//         }\n//         if (state.contacts.find(item => item.name === state.contactForm.name)) {\n//           state.errorContactExists = true;\n//         }\n//         return {\n//           ...state,\n//         };\n//       } else if (\n//         state.contactForm.name === '' ||\n//         state.contactForm.number === ''\n//       ) {\n//         if (state.contactForm.name === '') {\n//           state.contactFormInput.errorName = true;\n//         }\n//         if (state.contactForm.number === '') {\n//           state.contactFormInput.errorNumber = true;\n//         }\n//         return {\n//           ...state,\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           contacts: [\n//             ...state.contacts,\n//             {\n//               name: state.contactForm.name,\n//               id: uuidv4(),\n//               number: state.contactForm.number,\n//             },\n//           ],\n//           contactForm: {\n//             ...state.contactForm,\n//             name: '',\n//             number: '',\n//           },\n//         };\n//       }\n\n//     case 'contacts/deleteContact':\n//       const newContacts = state.contacts.filter(\n//         contact => contact.id !== payload,\n//       );\n//       return {\n//         ...state,\n//         contacts: [...newContacts],\n//       };\n\n//     case 'contacts/setFilter':\n//       return {\n//         ...state,\n//         filter: payload,\n//       };\n//     case 'contacts/setErrorContactExists':\n//       return {\n//         ...state,\n//         errorContactExists: payload,\n//       };\n\n//     case 'contacts/setErrorNumberExists':\n//       return {\n//         ...state,\n//         errorNumberExists: payload,\n//       };\n//     case 'contactForm/setName':\n//       return {\n//         ...state,\n//         contactForm: {\n//           ...state.contactForm,\n//           name: payload,\n//         },\n//       };\n//     case 'contactForm/setNumber':\n//       return {\n//         ...state,\n//         contactForm: {\n//           ...state.contactForm,\n//           number: payload,\n//         },\n//       };\n//     case 'contactFormInput/setErrorName':\n//       return {\n//         ...state,\n//         contactFormInput: {\n//           ...state.contactFormInput,\n//           errorName: payload,\n//         },\n//       };\n//     case 'contactFormInput/setErrorNumber':\n//       return {\n//         ...state,\n//         contactFormInput: {\n//           ...state.contactFormInput,\n//           errorNumber: payload,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}